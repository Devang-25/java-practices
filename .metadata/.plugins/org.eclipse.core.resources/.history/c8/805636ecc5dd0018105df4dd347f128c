package com.elasticsearch.winterbe;

/*
 * how to execute code in parallel via threads, tasks and executor services.
 */
public class Concurrency1 {
	/*
	 * All modern operating systems support concurrency both via processes and
	 * threads. Processes are instances of programs which typically run independent
	 * to each other, e.g. if you start a java program the operating system spawns a
	 * new process which runs in parallel to other programs. Inside those processes
	 * we can utilize threads to execute code concurrently, so we can make the most
	 * out of the available cores of the CPU.
	 * 
	 * Before starting a new thread you have to specify the code to be executed by
	 * this thread, often called the task. This is done by implementing Runnable - a
	 * functional interface defining a single void no-args method run() as
	 * demonstrated in the following example:
	 * 
	 * 
	 * Due to concurrent execution we cannot predict if the runnable will be invoked
	 * before or after printing 'done'. The order is non-deterministic, thus making
	 * concurrent programming a complex task in larger applications.
	 */

	public static void startThread() {

		Runnable task = () -> {
			String threadName = Thread.currentThread().getName();
			System.out.println("Hello " + threadName);
		};

		task.run();

		Thread thread = new Thread(task);
		thread.start();

		System.out.println("Done!");
	}
}
