package com.elasticsearch.winterbe;

public class Java8features {
	public static void main(String[] args) {
		Formula formula = new Formula() {
		    @Override
		    public double calculate(int a) {
		        return sqrt(a * 100);
		    }
		};
		formula.calculate(100);     // 100.0
		formula.sqrt(16);           // 4.0
	}
	List<String> names = Arrays.asList("peter", "anna", "mike", "xenia");

	Collections.sort(names, new Comparator<String>() {

	@Override
	public int compare(String a, String b) {
		return b.compareTo(a);
	}});

	Collections.sort(names,(

	String a, String b)->
	{
	    return b.compareTo(a);
	});

	Converter<String, Integer> converter = (from) -> Integer.valueOf(from);
	Integer converted = converter.convert("123");System.out.println(converted); // 123

	Converter<String, Integer> converter = Integer::valueOf;
	Integer converted = converter.convert("123");System.out.println(converted); // 123

	Something something = new Something();
	Converter<String, String> converter = something::startsWith;
	String converted = converter.convert("Java");System.out.println(converted); // "J"

	PersonFactory<Person> personFactory = Person::new;
	Person person = personFactory.create("Peter", "Parker");
}

interface Formula {
	double calculate(int a);

	default double sqrt(int a) {
		return Math.sqrt(a);
	}
}

@FunctionalInterface
interface Converter<F, T> {
	T convert(F from);
}

class Something {
	String startsWith(String s) {
		return String.valueOf(s.charAt(0));
	}
}

class Person {
	String firstName;
	String lastName;

	Person() {
	}

	Person(String firstName, String lastName) {
		this.firstName = firstName;
		this.lastName = lastName;
	}
}

interface PersonFactory<P extends Person> {
	P create(String firstName, String lastName);
}

}