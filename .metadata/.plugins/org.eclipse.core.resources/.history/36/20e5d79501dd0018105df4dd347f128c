package com.elasticsearch.winterbe;

import java.util.Arrays;
import java.util.List;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class Streams {

	// In the above example filter, map and sorted are intermediate operations
	// whereas forEach is a terminal operation

	/*
	 * Most stream operations accept some kind of lambda expression parameter, a
	 * functional interface specifying the exact behavior of the operation. Most of
	 * those operations must be both non-interfering and stateless. What does that
	 * mean?
	 * 
	 * A function is non-interfering when it does not modify the underlying data
	 * source of the stream, e.g. in the above example no lambda expression does
	 * modify myList by adding or removing elements from the collection.
	 * 
	 * A function is stateless when the execution of the operation is deterministic,
	 * e.g. in the above example no lambda expression depends on any mutable
	 * variables or states from the outer scope which might change during execution.
	 */

	public static void streamProcesses() {
		List<String> myList = Arrays.asList("a1", "a2", "b1", "c2", "c1");

		myList.stream().filter(s -> s.startsWith("c")).map(String::toUpperCase).sorted().forEach(System.out::println);
	}
	/*
	 * Different kind of streams# Streams can be created from various data sources,
	 * especially collections. Lists and Sets support new methods stream() and
	 * parallelStream() to either create a sequential or a parallel stream. Parallel
	 * streams are capable of operating on multiple threads and will be covered in a
	 * later section of this tutorial. We focus on sequential streams for now:
	 * 
	 */

	public static void streamKinds() {

		Arrays.asList("a1", "a2", "a3")
		    .stream()
		    .findFirst()
		    .ifPresent(System.out::println);  // a1

		Stream.of("a1", "a2", "a3")
		    .findFirst()
		    .ifPresent(System.out::println);  // a1
		
		IntStream.range(1, 4)
	    .forEach(System.out::println);

		
		Arrays.stream(new int[] {1, 2, 3})
	    .map(n -> 2 * n + 1)
	    .average()
	    .ifPresent(System.out::println);  // 5.0
		
		Stream.of("a1", "a2", "a3")
	    .map(s -> s.substring(1))
	    .mapToInt(Integer::parseInt)
	    .max()
	    .ifPresent(System.out::println);  // 3
		
		IntStream.range(1, 4)
	    .mapToObj(i -> "a" + i)
	    .forEach(System.out::println);
		
		Stream.of(1.0, 2.0, 3.0)
	    .mapToInt(Double::intValue)
	    .mapToObj(i -> "a" + i)
	    .forEach(System.out::println);
		
	}

	public static void main(String[] args) {
		streamProcesses();
	}

}
